import React, { createContext, useReducer, useState, useEffect } from 'react';
import Header from "./components/Commons/Header";
import Footer from "./components/Commons/Footer";
import Home from "./components/ChuyenXe/Home";
import 'bootstrap/dist/css/bootstrap.min.css';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { Container } from "react-bootstrap";
import Cart from "./components/ChuyenXe/Cart";
import Register from "./components/NguoiDung/Register";
import Login from "./components/NguoiDung/Login";
import MyUserReducer from "./reducers/MyUserReducer";
import MyCartReducer from "./reducers/MyCartReducer";
import { Webchat, WebchatProvider, Fab, getClient } from "@botpress/webchat";
import { buildTheme } from "@botpress/webchat-generator";

// Add your Client ID here
const clientId = "ae5e3394-6fa5-4717-b36c-f774ad502b3f";

// Create contexts
export const MyUserContext = createContext();
export const MyDispatchContext = createContext();
export const MyCartContext = createContext();

// Create your chat configuration here
const { theme } = buildTheme({
  themeName: "prism",
  themeColor: "#634433",
});

// C√°c c√¢u tr·∫£ l·ªùi m·∫´u cho chatbot
const botResponses = {
  greeting: "Xin ch√†o! T√¥i l√† chatbot c·ªßa C√¥ng ty v·∫≠n t·∫£i Linh Vi. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
  locationInquiry: "C√¥ng ty Linh Vi c√≥ tr·ª• s·ªü ch√≠nh t·∫°i 123 ƒê∆∞·ªùng L√™ L·ª£i, Th√†nh ph·ªë H·ªì Ch√≠ Minh.",
  companyHistory: "C√¥ng ty Vi Linh ƒë√£ ho·∫°t ƒë·ªông trong ng√†nh v·∫≠n t·∫£i h∆°n 10 nƒÉm, v·ªõi m·ª•c ti√™u cung c·∫•p d·ªãch v·ª• ch·∫•t l∆∞·ª£ng cao cho kh√°ch h√†ng.",
  ticketBookingMethods: "B·∫°n c√≥ th·ªÉ ƒë·∫∑t v√© qua website c·ªßa ch√∫ng t√¥i ho·∫∑c qua ƒëi·ªán tho·∫°i. C√°c h√¨nh th·ª©c thanh to√°n bao g·ªìm VNPay, th·∫ª t√≠n d·ª•ng, v√† ti·ªÅn m·∫∑t.",
  routes: "Ch√∫ng t√¥i cung c·∫•p nhi·ªÅu tuy·∫øn xe t·ª´ Th√†nh ph·ªë H·ªì Ch√≠ Minh ƒë·∫øn H√† N·ªôi, ƒê√† N·∫µng, Nha Trang v√† nhi·ªÅu ƒë·ªãa ƒëi·ªÉm kh√°c.",
  scheduleInquiry: "Vui l√≤ng cho t√¥i bi·∫øt tuy·∫øn xe b·∫°n mu·ªën bi·∫øt, v√† t√¥i s·∫Ω cung c·∫•p l·ªãch tr√¨nh cho b·∫°n.",
  promotions: "Hi·ªán t·∫°i, ch√∫ng t√¥i ƒëang c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i 20% cho kh√°ch h√†ng ƒë·∫∑t v√© tr·ª±c tuy·∫øn trong th√°ng n√†y.",
  ticketPolicy: "N·∫øu b·∫°n c·∫ßn thay ƒë·ªïi ho·∫∑c h·ªßy v√©, xin vui l√≤ng li√™n h·ªá v·ªõi b·ªô ph·∫≠n chƒÉm s√≥c kh√°ch h√†ng c·ªßa ch√∫ng t√¥i.",
  shuttleService: "C√≥, ch√∫ng t√¥i cung c·∫•p d·ªãch v·ª• ƒë∆∞a ƒë√≥n t·∫≠n n∆°i cho kh√°ch h√†ng trong khu v·ª±c n·ªôi th√†nh.",
  specialPolicies: "Ch√∫ng t√¥i c√≥ ch√≠nh s√°ch ∆∞u ƒë√£i cho tr·∫ª em v√† ng∆∞·ªùi cao tu·ªïi khi ƒë·∫∑t v√©. Vui l√≤ng tham kh·∫£o th√™m tr√™n website c·ªßa ch√∫ng t√¥i.",
};

// S·ª≠ d·ª•ng trong chatbot
function getResponse(userMessage) {
  if (userMessage.includes("tr·ª• s·ªü")) {
    return botResponses.locationInquiry;
  } else if (userMessage.includes("bao nhi√™u nƒÉm")) {
    return botResponses.companyHistory;
  } else if (userMessage.includes("h√¨nh th·ª©c thanh to√°n")) {
    return botResponses.ticketBookingMethods;
  } else if (userMessage.includes("tuy·∫øn xe")) {
    return botResponses.routes;
  } else if (userMessage.includes("th·ªùi gian")) {
    return botResponses.scheduleInquiry;
  } else if (userMessage.includes("khuy·∫øn m√£i")) {
    return botResponses.promotions;
  } else if (userMessage.includes("thay ƒë·ªïi ho·∫∑c h·ªßy")) {
    return botResponses.ticketPolicy;
  } else if (userMessage.includes("ƒë∆∞a ƒë√≥n t·∫≠n n∆°i")) {
    return botResponses.shuttleService;
  } else if (userMessage.includes("ch√≠nh s√°ch tr·∫ª em")) {
    return botResponses.specialPolicies;
  } else {
    return botResponses.greeting; // Tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
  }
}

const App = () => {
  // User and cart state
  const initialUserState = { name: "", email: "", isNew: false }; // Th√™m thu·ªôc t√≠nh isNew
  const [user, dispatch] = useReducer(MyUserReducer, initialUserState);

  const initialCartState = JSON.parse(localStorage.getItem('cartCounter')) || 0;
  const [cartCounter, cartDispatch] = useReducer(MyCartReducer, initialCartState);

  // Webchat state
  const [isWebchatOpen, setIsWebchatOpen] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false); // State ƒë·ªÉ theo d√µi tr·∫°ng th√°i ph√≥ng to
  const [chatConfig, setChatConfig] = useState({
    composerPlaceholder: "B·∫°n mu·ªën h·ªèi g√¨?",
    botName: "D·ªãch v·ª• kh√°ch h√†ng",
    botAvatar: "https://picsum.photos/200/300",
    botDescription: "Xin ch√†o! üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi d·ªãch v·ª• chat tr·ª±c tuy·∫øn. H√£y cho ch√∫ng t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨.",
  }); // Tr·∫°ng th√°i c·∫•u h√¨nh chat

  const client = getClient({ clientId });

  const toggleWebchat = () => {
    setIsWebchatOpen((prevState) => !prevState);
  };

  const toggleExpand = () => {
    setIsExpanded((prevState) => !prevState);
  };

  // C·∫≠p nh·∫≠t c·∫•u h√¨nh chatbot khi ng∆∞·ªùi d√πng m·ªõi ƒëƒÉng nh·∫≠p
  useEffect(() => {
    // Ki·ªÉm tra n·∫øu user kh√¥ng ph·∫£i l√† null v√† c√≥ thu·ªôc t√≠nh isNew
    if (user && user.isNew) {
      setChatConfig((prevConfig) => ({
        ...prevConfig,
        botName: `Chatbot M·ªõi c·ªßa ${user.name}`, // T√πy ch·ªânh t√™n bot cho ng∆∞·ªùi d√πng m·ªõi
        botDescription: "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi d·ªãch v·ª• chat tr·ª±c tuy·∫øn m·ªõi!",
      }));
    } else {
      // ƒê·∫∑t l·∫°i c·∫•u h√¨nh v·ªÅ m·∫∑c ƒë·ªãnh n·∫øu ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† m·ªõi
      setChatConfig({
        composerPlaceholder: "B·∫°n mu·ªën h·ªèi g√¨?",
        botName: "D·ªãch v·ª• kh√°ch h√†ng",
        botAvatar: "https://picsum.photos/200/300",
        botDescription: "Xin ch√†o! üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi d·ªãch v·ª• chat tr·ª±c tuy·∫øn. H√£y cho ch√∫ng t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨.",
      });
    }
  }, [user]); // Ch·∫°y effect n√†y khi user thay ƒë·ªïi

  return (
    <MyUserContext.Provider value={user}>
      <MyDispatchContext.Provider value={dispatch}>
        <MyCartContext.Provider value={[cartCounter, cartDispatch]}>
          <BrowserRouter>
            <Header />
            <WebchatProvider client={client} theme={theme} config={chatConfig}>
              <Container>
                <Routes>
                  <Route path='/' element={<Home />} />
                  <Route path='/login' element={<Login />} />
                  <Route path='/register' element={<Register />} />
                  <Route path='/cart' element={<Cart />} />
                </Routes>
              </Container>

              <Fab onClick={toggleWebchat} aria-label="Open web chat" />
              <div className={`${isWebchatOpen ? "webchat-visible" : "webchat-hidden"} ${isExpanded ? "webchat-expanded" : ""}`}>
                <Webchat
                  config={{
                    ...chatConfig,
                    onMessage: (message) => {
                      // L·∫•y c√¢u tr·∫£ l·ªùi t·ª´ botResponses
                      const botReply = getResponse(message.text);
                      // G·ª≠i c√¢u tr·∫£ l·ªùi v·ªÅ cho chatbot
                      return { text: botReply };
                    }
                  }}
                />
                <button onClick={toggleExpand} style={{ position: 'absolute', top: '5px', right: '5px' }}>
                  {isExpanded ? "Thu Nh·ªè" : "Ph√≥ng To"}
                </button>
              </div>
            </WebchatProvider>
            <Footer />
          </BrowserRouter>
        </MyCartContext.Provider>
      </MyDispatchContext.Provider>
    </MyUserContext.Provider>
  );
};

export default App;
